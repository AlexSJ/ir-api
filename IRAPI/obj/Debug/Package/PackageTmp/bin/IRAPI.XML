<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IRAPI</name>
    </assembly>
    <members>
        <member name="T:IRAPI.FilterConfig">
            <summary>
            Filtra Configuração da API
            </summary>
        </member>
        <member name="M:IRAPI.FilterConfig.RegisterGlobalFilters(System.Web.Mvc.GlobalFilterCollection)">
            <summary>
            Registra os FIltros
            </summary>
            <param name="filters"></param>
        </member>
        <member name="T:IRAPI.ApplicationUserManager">
            <summary>
            Configure the application user manager used in this application. UserManager is defined in ASP.NET Identity and is used by the application. 
            </summary>
        </member>
        <member name="M:IRAPI.ApplicationUserManager.#ctor(IRCore.BusinessObject.Identity.APIUsuarioUserStore)">
            <summary>
            Contrutor da Classe que precisa receber um objeto para salvar usuário
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:IRAPI.ApplicationUserManager.Create(Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{IRAPI.ApplicationUserManager},Microsoft.Owin.IOwinContext)">
            <summary>
            Cria um usuário
            </summary>
            <param name="options"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:IRAPI.RouteConfig">
            <summary>
            Configura a Rota
            </summary>
        </member>
        <member name="M:IRAPI.RouteConfig.RegisterRoutes(System.Web.Routing.RouteCollection)">
            <summary>
            Registra as rotas
            </summary>
            <param name="routes"></param>
        </member>
        <member name="T:IRAPI.Startup">
            <summary>
            Inicia o processo de autênticação
            </summary>
        </member>
        <member name="M:IRAPI.Startup.ConfigureAuth(Owin.IAppBuilder)">
            <summary>
            For more information on configuring authentication, please visit http://go.microsoft.com/fwlink/?LinkId=301864
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:IRAPI.Startup.Configuration(Owin.IAppBuilder)">
            <summary>
            Adiciona configuração na classe de inicio da configuração de autênticação
            </summary>
            <param name="app"></param>
        </member>
        <member name="P:IRAPI.Startup.OAuthOptions">
            <summary>
            Opções de aut~enticação
            </summary>
        </member>
        <member name="P:IRAPI.Startup.PublicClientId">
            <summary>
            ID publico do Cliente
            </summary>
        </member>
        <member name="T:IRAPI.WebApiConfig">
            <summary>
                Configuração da API
            </summary>
        </member>
        <member name="M:IRAPI.WebApiConfig.Register(System.Web.Http.HttpConfiguration)">
            <summary>
                Registra a configuração da api
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:IRAPI.Common.Exception.CompraException">
            <summary>
            Captura erros do tipo CompraException.
            </summary>
        </member>
        <member name="M:IRAPI.Common.Exception.CompraException.#ctor">
            <summary>
            Initializes a new instance of the CompraException class.
            </summary>
        </member>
        <member name="M:IRAPI.Common.Exception.CompraException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CompraException class.
            </summary>
            <param name="message">A message to include in the exception.</param>
        </member>
        <member name="M:IRAPI.Common.Exception.CompraException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CompraException class.
            </summary>
            <param name="message">A message to include in the exception.</param>
            <param name="innerException">An exception to include in the exception.</param>
        </member>
        <member name="M:IRAPI.Common.Exception.CompraException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CompraException class.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or System.Exception.HResult is zero (0).</exception>
        </member>
        <member name="M:IRAPI.Controllers.MasterApiController.NewRelicIgnoreTransaction">
            <summary>
            Desabilita os erros para a API do NewRelic.
            </summary>
        </member>
        <member name="M:IRAPI.Controllers.NpsController.SendDataNPS(IRAPI.Models.NpsAdicionarAgendamentoModel)">
            <summary>
            Método da API para enviar dados diretamente para a API do NPS.
            </summary>
            <param name="Name">Nome do cliente que efetuou a compra do Ingresso</param>
            <param name="Email">E-mail para onde deverá ser disparado a pesquisa de satisfação</param>
            <param name="Delay">Tempo medido em segundos para envio do e-mail, controle este feito pela API</param>
            <param name="Canal">Indicar o canal de comunicacao onde foi realizada a compra do ingresso</param>
        </member>
        <member name="M:IRAPI.Controllers.NpsController.AdicionarAgendamento(IRAPI.Models.NpsAdicionarAgendamentoModel)">
            <summary>
            Método da API que realiza o agendamento para o envio de uma pesquisa de satisfação ao cliente que efetua compra de
            ingressos na Ingresso Rápido. Este método apenas armazena o agendamento em uma tabela, um robô irá ler os dados
            gravados nesta tabela para chamar uma API que realiza o envio do e-mail com a pesquisa de satisfação.
            URL de acesso: nps/adicionar
            Método de acesso: POST
            </summary>
            <param name="Name">Nome do cliente que efetuou a compra do Ingresso</param>
            <param name="Email">E-mail para onde deverá ser disparado a pesquisa de satisfação</param>
            <param name="Delay">Tempo medido em segundos para envio do e-mail, controle este feito pela API</param>
            <param name="Canal">Indicar o canal de comunicacao onde foi realizada a compra do ingresso</param>
        </member>
        <member name="M:IRAPI.Controllers.NpsController.AtualizarAgendamento(IRAPI.Models.NpsAtualizarAgendamento)">
            <summary>
            Método da API que realiza a alteração de status de envio do agendamento da pesquisa de satisfação
            URL de acesso: nps/atualizar
            Método de acesso: POST
            </summary>
            <param name="IdAgendamento">Código do Agendamento</param>
            <param name="Status">Informar o status que será atualizado o registro. Status Esperados = [Aguardando, Sucesso]</param>
        </member>
        <member name="M:IRAPI.Controllers.NpsController.AtualizarAgendamentoRange(IRAPI.Models.NpsAtualizarAgendamentoRange)">
            <summary>
            Método da API que realiza a alteração por range inicial e final do status de envio do agendamento da pesquisa de satisfação
            URL de acesso: nps/atualizar
            Método de acesso: POST
            </summary>
            <param name="rq">Contêm o IdAgendamentoInicial, IdAgendamentoFinal e o Status que serão utilizados para atualizar os status dos agendamentos</param>
        </member>
        <member name="M:IRAPI.Controllers.NpsController.ObterAgendamentosPorStatus(IRCore.BusinessObject.Enumerator.enumStatusNPS)">
            <summary>
            Método da API que retorna uma lista contendo todos os agendamentos existentes para o status passado no parâmetro
            </summary>
            <param name="Status">Status do Agendamento</param>
        </member>
        <member name="M:IRAPI.Controllers.OsespController.Get">
            <summary>
            Método da API que busca eventos com base nos filtros e retorna com base no numero da pagina e eventos por página. 
            URL de acesso: eventos
            Método de acesso: GET
            </summary>
            <param name="busca">String a ser buscada</param>
            <param name="localid">ID do local do evento</param>
            <param name="uf">Estado do evento</param>
            <param name="cidade">Cidade do evento</param>
            <param name="tipoid">ID do tipo de evento</param>
            <param name="subtipoID">ID do subtipo de evento</param>
            <param name="pg">Número da página</param>
            <param name="qtdpg">Quantidade eventos por página</param>
        </member>
        <member name="M:IRAPI.Controllers.OsespController.PostAuth(IRAPI.Models.ClienteAuthRequestModel)">
            <summary>
            Método da API que autentica o Cliente com base no username e password informado e verifica se este cliente tem assinatura no OSESP. 
            URL de acesso: clientes/auth
            Método de acesso: POST
            </summary>
            <param name="obj"></param>
            <returns>Objeto RetonoModel tendo as inforações de Sucesso,objeto Login e mensagem informando o erro, quando houver</returns>
        </member>
        <member name="M:IRAPI.Controllers.OsespController.GetSetores(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Método da API que retorna o status da operação, uma mensagem e uma lista de setores com base no ID do evento e da apresentação.
            URL de acesso: eventos/{eventoID}/apresentacoes/{apresentacaoID}/setores
            Método de acesso: GET
            </summary>
            <param name="eventoID">ID do evento</param>
            <param name="apresentacaoID">ID da apresentação</param>
        </member>
        <member name="M:IRAPI.Controllers.OsespController.GetEvento(System.Int32)">
            <summary>
            Método da API que retorna o status da operação, uma mensagem e um evento com base no ID informado.
            URL de acesso: eventos/{ID}
            Método de acesso: GET
            </summary>
            <param name="id">Id do evento</param>
        </member>
        <member name="M:IRAPI.Controllers.OsespController.PostBloquearIngresso(IRAPI.Models.OsespIngresso)">
            <summary>
            Método que bloqueia um ingresso
            URL de acesso: osesp/ingressos_bloqueados
            Método de acesso: POST
            </summary>
            <param name="id">Id do Ingresso</param>
        </member>
        <member name="M:IRAPI.Controllers.OsespController.DeleteDesbloquearIngresso(System.Int32)">
            <summary>
            Método da API que retorna o status da operação, uma mensagem e um evento com base no ID informado.
            URL de acesso: osesp/ingressos_bloqueados
            Método de acesso: GET
            </summary>
            <param name="id">Id do evento</param>
        </member>
        <member name="M:IRAPI.Controllers.OsespController.PutLogado(IRCore.DataAccess.Model.Login)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.OsespController.GetLogado">
            <summary>
            Método da API que retorna o usuário logado se ele existir
            URL de acesso: osesp/clientes/logado
            Método de acesso: GET
            </summary>
        </member>
        <member name="T:IRAPI.Controllers.PingController">
            <summary>
            Classe responsável por ferramenta de comunicação com o servidor.
            </summary>
        </member>
        <member name="M:IRAPI.Controllers.PingController.Index">
            <summary>
            Verifica se o serviço está ativo.
            </summary>
            <returns>Mensagem HTTP com código 200 - OK.</returns>
        </member>
        <member name="T:IRAPI.Controllers.ReservaController">
            <summary>
            API responsável por realizar as reservas.
            </summary>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.Delete">
            <summary>
            Método da API que remove limpa toda a reserva
            URL de acesso: reservas
            Método de acesso: DELETE
            </summary>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.DeleteRemoveEvento(System.Int32)">
            <summary>
            Método da API que remove um evento do rq.
            URL de acesso: rq/ingressos_por_evento/{eventoID}
            Método de acesso: DELETE
            </summary>
            <param name="eventoID"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.DeleteRemoveIngressorq(System.Int32)">
            <summary>
            Método da API que remove um ingresso ao rq.
            URL de acesso: reservas/atual/ingressos/{ingressoId}
            Método de acesso: DELETE
            </summary>
            <param name="ingressoId"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.DeleteRemoveMesa(System.Int32)">
            <summary>
            Deleta uma mesa do SessionCompra
            </summary>
            <param name="lugarID"></param>
            <param name="apresentacaoID"></param>
            <param name="setorID"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.DeleteRemovePacote(System.Int32,System.String)">
            <summary>
            Método da API que remove um pacote ao rq.
            URL de acesso: rq/reserva/pacotes/{pacoteID}/{pacoteGrupo}
            Método de acesso: DELETE
            </summary>
            <param name="pacoteID"></param>
            <param name="pacoteGrupo"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.DeleteRemoveValeIngresso(System.String)">
            <summary>
            Método da API que remove um vale ingresso do rq.
            URL de acesso: rq/vale_ingresso
            Método de acesso: DELETE
            </summary>
            <param name="rq">rq Model onde o vale ingresso será adicionado</param>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.GetEntregas">
            <summary>
            Pega as entregas da compra
            </summary>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.GetFormasPagamento">
            <summary>
            Retorna lista das formas de pagamento
            </summary>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.GetPayPalToken(System.String,System.String)">
            <summary>
            Método da API que retorna o token para início do pagamento com PayPal
            URL de acesso: reserva/atual/paypal/token
            Método de acesso: GET
            </summary>
            <returns>Token</returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.PostAddIngressorq(IRAPI.Models.ReservaIngressoRequestModel)">
            <summary>
            Método da API que insere um ingresso ao rq.
            URL de acesso: reservas/atual/ingressos/
            Método de acesso: POST
            </summary>
            <param name="rq"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.PostAddPacote(IRAPI.Models.ReservaPacoteRequestModel)">
            <summary>
            Método da API que adiciona um pacote ao rq.
            URL de acesso: rq/reserva/pacotes/{pacoteID}/{quantidade}
            Método de acesso: POST
            </summary>
            <param name="rq"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.PostAddValeIngresso(IRAPI.Models.ReservaValeIngressoRequestModel)">
            <summary>
            Método da API que adiciona um vale ingresso ao rq.
            URL de acesso: rq/vale_ingresso
            Método de acesso: POST
            </summary>
            <param name="request">rq Model onde o vale ingresso será adicionado</param>
            reservas/atual/vale_ingressos (codigo, Compra+com entrega)
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.PostEntrega(IRAPI.Models.ReservaEntregaRequestModel)">
            <summary>
            Vincula um endereço de entrega a uma compra.
            </summary>
            <param name="entrega"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.PostFinalizarCompra(System.Collections.Generic.List{IRCore.BusinessObject.Models.CompraPagamentoModel})">
            <summary>
            Finaliza compra
            </summary>
            <param name="pagamentos"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.PostFinalizarCompraExterna(System.Collections.Generic.List{IRCore.BusinessObject.Models.CompraPagamentoExternoModel})">
            <summary>
            Finaliza compra externa
            </summary>
            <param name="pagamentos"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.PostMesaFechada(IRAPI.Models.ReservaMesaFechadaListRequestModel)">
            <summary>
            Reserva uma mesa fechada.
            </summary>
            <param name="mesaFechadaRequest"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.PutAlteraPreco(System.Int32,IRAPI.Models.ReservaTrocaPrecoRequestModel)">
            <summary>
            Altera preço
            </summary>
            <param name="IngressoID"></param>
            <param name="precoID"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.PutAumentaTempo(IRAPI.Models.ReservaAumentaTempoRequestModel)">
            <summary>
            Esse método deve atualizar no banco de dados na tabela ingresso da base IngressosNovo
            e na tabela rq da base SiteIR o tempo de expiração da reserva,
            adicionando o tempo passado como parâmetro ao tempo que estava la.
            </summary>
            <param name="rq"></param>
            <returns>Esse método retorna o objeto Compra, com os itens do rq com sua reserva atualizada.</returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.PutTrocaPrecoMesa(System.Int32,IRAPI.Models.ReservaTrocaPrecoRequestModel)">
            <summary>
            Reserva uma mesa aberta
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <summary>
            Realiza a troca de preço de uma mesa
            </summary>
            <param name="precoID"></param>
            <param name="mesa"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.ReservaIngressoPorQuantidade(IRAPI.Models.ReservaIngressosQtdRquestModel)">
            <summary>
            Insere itens no rq
            </summary>
            <param name="reserva"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.ReservaIngressoPorQuantidade2(IRAPI.Models.ReservaIngressosQtdRquestModel)">
            <summary>
            Insere itens no rq
            </summary>
            <param name="reserva"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.AdicionarLogPagamento(System.Collections.Generic.List{IRCore.BusinessObject.Models.CompraPagamentoModel},IRAPI.Common.Exception.CompraException)">
            <summary>
            Adiciona log de pagamento em caso de erro no momento de efetuar a compra.
            </summary>
            <param name="pagamentos">Coleção de meios de pagamento do usuário.</param>
            <param name="erro">Erro ao validar o processo de compra.</param>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.GerarErroHttp(IRCore.BusinessObject.Models.RetornoModel{IRCore.BusinessObject.Models.CompraModel},System.Exception,System.Net.HttpStatusCode,System.Boolean,System.Collections.Generic.List{IRCore.BusinessObject.Models.CompraPagamentoModel})">
            <summary>
            Gera erro HTTP para o modelo compra model.
            </summary>
            <param name="compra">Modelo de retorno.</param>
            <param name="erro">Exception com detalhes do erro.</param>
            <param name="codigoHttp">Erro HTTP.</param>
            <param name="gravarLogPagamento">Indicativo para gravação de log de pagamento.</param>
            <param name="pagamentos">Informações de pagamento</param>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.RecuperaEventoComValidacaoFinalizarCompra(System.Collections.Generic.List{IRCore.BusinessObject.Models.CompraPagamentoModel},IRCore.BusinessObject.Models.RetornoModel{IRCore.BusinessObject.Models.CompraModel},IRCore.DataAccess.ADO.Estrutura.MasterADOBase)">
            <summary>
            Valida a compra no momento do pagamento.
            </summary>
            <param name="pagamentos">Informações de pagamento.</param>
            <param name="retorno">Modelo de retorno.</param>
            <param name="ado">Contexto de banco.</param>
            <returns>Detalhes do evento.</returns>
        </member>
        <member name="M:IRAPI.Controllers.ReservaController.RecuperaEventoComValidacaoFinalizarCompraExterna(IRCore.BusinessObject.Models.RetornoModel{IRCore.BusinessObject.Models.CompraModel},IRCore.DataAccess.ADO.Estrutura.MasterADOBase)">
            <summary>
            Valida a compra externa no momento do pagamento.
            </summary>
            <param name="retorno">Modelo de retorno.</param>
            <param name="ado">Contexto de banco.</param>
            <returns>Detalhes do evento.</returns>
        </member>
        <member name="T:IRAPI.Controllers.ClienteController">
            <summary>
            Controller responsável por autenticação e gerenciamento do usuário
            </summary>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.PostAuth(IRAPI.Models.ClienteAuthRequestModel)">
            <summary>
            Método da API que autentica o Cliente com base no username e password informado. 
            URL de acesso: clientes/auth
            Método de acesso: POST
            </summary>
            <param name="clienteAuthRequest"></param>
            <returns>Objeto RetonoModel tendo as inforações de Sucesso,objeto Login e mensagem informando o erro, quando houver</returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.DeleteAuth">
            <summary>
            Método da API que Remove a autenticacao do Cliente
            URL de acesso: clientes/auth
            Método de acesso: Delete
            </summary>
            <returns>Objeto RetonoModel tendo as inforações de Sucesso,objeto Login e mensagem informando o erro, quando houver</returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.GetFacebookUri(IRAPI.Models.ClienteAuthFacebookReturnUrl)">
            <summary>
            Método da API que retorna url que realiza a requisição dos dados do usuário no facebook
            URL de acesso: clientes/auth/facebook/uri
            Método de acesso: Post
            </summary>
            <param name="obj"></param>
            <returns>Objeto RetonoModel tendo as inforações de Sucesso, string Url e mensagem informando o erro, quando houver</returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.PostFacebookAuth(IRAPI.Models.ClienteAuthFacebookRequestModel)">
            <summary>
            Método da API que Loga a partir do Facebook
            URL de acesso: clientes/auth/facebook
            Método de acesso: Post
            </summary>
            <param name="facebookInfo"></param>
            <returns>Objeto RetonoModel tendo as inforações de Sucesso,objeto Login e mensagem informando o erro, quando houver</returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.PostAccountKitAuth(IRAPI.Models.ClienteAuthAccountKitRequestModel)">
            <summary>
            Login através do Account Kit
            </summary>
            <returns>Objeto RetonoModel com as informações de sucesso, objeto login e mensagem</returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.PostFacebookCadastroAuth(IRAPI.Models.ClienteAuthFacebookCadasrtoRequestModel)">
            <summary>
            Método da API que cadastra a partir do Facebook
            URL de acesso: clientes/auth/facebook
            Método de acesso: Post
            </summary>
            <param name="facebookInfo"></param>
            <returns>Objeto RetonoModel com as informações de sucesso, objeto login e mensagem</returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.PostAccountKitCadastro(IRAPI.Models.ClienteCadastroAccountKitRequestModel)">
            <summary>
            Cadastro através do Account Kit
            </summary>
            <param name="cadastroAccountKit"></param>
            <returns>Objeto RetonoModel com as informações de sucesso, objeto login e mensagem</returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.PostFacebookVinculo(IRAPI.Models.ClienteAuthFacebookVinculoRequestModel)">
            <summary>
            Método da API que Vincula usuario a partir do Facebook
            URL de acesso: clientes/auth/facebook/vinculo
            Método de acesso: Post
            </summary>
            <param name="obj"></param>
            <returns>Objeto RetonoModel tendo as inforações de Sucesso,objeto Login e mensagem informando o erro, quando houver</returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.GetSenhaToken(System.String)">
            <summary>
            Método da API que carrega o usuário vinculado a um token de alterar senha
            URL de acesso: clientes/senha/{token}
            Método de acesso: Post
            </summary>
            <param name="token"></param>
            <returns>Objeto RetonoModel tendo as inforações de Sucesso,objeto Login e mensagem informando o erro, quando houver</returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.PutSenha(System.String,IRAPI.Models.ClienteSenhaModel)">
            <summary>
            Altera senha baseada no token
            </summary>
            <param name="token">Token</param>
            <param name="trocaSenha">Nova senha</param>
            <returns></returns>
            <exception cref="T:System.Web.Http.HttpResponseException"></exception>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.Post(IRCore.DataAccess.Model.Login)">
            <summary>
            Método da API que efetua um cadastro de um cliente com base nos dados informados.
            URL de acesso: clientesV2 (depois alterar para clientes)
            Método de Acesso: POST
            </summary>
            <param name="login"></param>
            <returns>Objeto RetornoModel tendo as informações de Sucesso,objeto Login e mensagem informando o erro,quando houver</returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.PutLogado(IRCore.DataAccess.Model.Login)">
            <summary>
            Método que atualiza os dados cadastrais do usuário logado
            </summary>
            <param name="loginInfo">Informações atualizadas</param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.GetLogado">
            <summary>
            Método da API que retorna os dados de Login do cliente logado.
            URL de acesso: clientes/logado
            Método de Acesso: GET
            </summary>
            <param name="obj"></param>
            <returns>Objeto RetornoModel tendo as informações de Sucesso,objeto Login e mensagem informando o erro,quando houver</returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.GetLogadoEnderecos">
            <summary>
            Método da API que retorna os enderecos do usuário logado.
            URL de acesso: clientes/{id}
            Método de Acesso: GET
            </summary>
            <param name="obj"></param>
            <returns>Objeto RetornoModel tendo as informações de Sucesso,objeto Login e mensagem informando o erro,quando houver</returns>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.GetMeusIngressos(System.Int32,System.Int32)">
            <summary>
            Retorna as compras do usuário logado.
            </summary>
            <param name="pg">Página</param>
            <param name="qtdpg">Quantidade de página</param>
            <returns>Lista de compras</returns>
            <exception cref="T:System.Web.Http.HttpResponseException"></exception>
        </member>
        <member name="M:IRAPI.Controllers.ClienteController.PutTrocaSenha(IRAPI.Models.ClienteTrocaSenhaRequestModel)">
            <summary>
            Atualiza senha do uauário.
            </summary>
            <param name="cliente"></param>
            <returns></returns>
        </member>
        <member name="T:IRAPI.Controllers.EstadoController">
            <summary>
            APIs de estados, cidades e pontos de venda
            </summary>
        </member>
        <member name="M:IRAPI.Controllers.EstadoController.GetCidades(System.String,System.Boolean)">
            <summary>
            Api que retorna as cidades do estado informado
            </summary>
            <param name="uf">Estado</param>
            <param name="apenasEventos">Indica se deve retornar apenas cidades que possui eventos</param>
            <returns>Lista de cidades</returns>
        </member>
        <member name="M:IRAPI.Controllers.EstadoController.Get(System.Boolean)">
            <summary>
            Api que retorna os estados
            </summary>
            <param name="apenasEventos">Indica se deve retornar apenas cidades que possui eventos</param>
            <returns>Lista de estados</returns>
        </member>
        <member name="M:IRAPI.Controllers.EstadoController.GetPontosVenda(System.String,System.String)">
            <summary>
            Api que retorna os pontos de venda da cidade informada
            </summary>
            <param name="uf">Estado</param>
            <param name="cidade">Cidade</param>
            <returns>Lista de pontos de venda</returns>
        </member>
        <member name="T:IRAPI.Controllers.EventoController">
            <summary>
            Controller de eventos
            </summary>
        </member>
        <member name="M:IRAPI.Controllers.EventoController.GetCompleto(System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Double},System.Nullable{System.Double},System.Double,System.Int32,System.Int32,IRCore.DataAccess.ADO.Enumerator.enumEventoOrdem)">
            <summary>
            Método da API que busca eventos com base nos filtros e retorna com base no numero da pagina e eventos por página. 
            URL de acesso: eventos
            Método de acesso: GET
            </summary>
            <param name="busca">Texto a ser buscado</param>
            <param name="localid">Id do local do evento</param>
            <param name="uf">Estado do evento</param>
            <param name="cidade">Cidade do evento</param>
            <param name="tipoID">Id da categoria do evento</param>
            <param name="subtipoID">Id da subcategoria do evento</param>
            <param name="latitude">Latitude do usuário</param>
            <param name="longitude">Longitude do usuário</param>
            <param name="distancia">Distância entre o usuário e o local do evento</param>
            <param name="pg">Número da página a ser exibida</param>
            <param name="qtdpg">Quantidade de ítens por página</param>
            <param name="ordem">Ordenação</param>
            <returns></returns>
            <exception cref="T:System.Web.Http.HttpResponseException"></exception>
        </member>
        <member name="M:IRAPI.Controllers.EventoController.Get(System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Double},System.Nullable{System.Double},System.Double,System.Int32,System.Int32,IRCore.DataAccess.ADO.Enumerator.enumEventoOrdem)">
            <summary>
            Método da API que busca eventos com base nos filtros e retorna com base no numero da pagina e eventos por página. 
            URL de acesso: eventos
            Método de acesso: GET
            </summary>
            <param name="busca">String a ser buscada</param>
            <param name="localid">ID do local do evento</param>
            <param name="uf">Estado do evento</param>
            <param name="cidade">Cidade do evento</param>
            <param name="tipoID"></param>
            <param name="subtipoID">ID do subtipo de evento</param>
            <param name="distancia"></param>
            <param name="pg">Número da página</param>
            <param name="qtdpg">Quantidade eventos por página</param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="ordem"></param>
        </member>
        <member name="M:IRAPI.Controllers.EventoController.GetEvento(System.Int32,System.Int32)">
            <summary>
            Método da API que retorna o status da operação, uma mensagem e um evento com base no ID informado.
            URL de acesso: eventos/{ID}
            Método de acesso: GET
            </summary>
            <param name="id">Id do evento</param>
            <param name="mostrarEstatistica"></param>
        </member>
        <member name="M:IRAPI.Controllers.EventoController.GetDestaques(System.String,System.Int32)">
            <summary>
            Esse método retorna os destaques Nível 2, o parametro tipo é obrigatório e o região é opcional, 
            caso não for passado deve retornar eventos da região que é marcada como Geral. Esse método também 
            tem que retornar o maior e menor preço.
            RL de acesso: eventos/destaques?tipo={tipo}&amp;regiao={regiao}
            Método de acesso: GET
            </summary>
            <param name="tipo"></param>
            <param name="regiao"></param>
            <returns></returns>
            <exception cref="T:System.Web.Http.HttpResponseException"></exception>
        </member>
        <member name="M:IRAPI.Controllers.EventoController.GetPacotesEvento(System.Int32)">
            <summary>
            Método da API que retorna o status da operação, uma mensagem e uma lista de pactotes com base no ID do evento.
            URL de acesso: eventos/{ID}/pacotes
            Método de acesso: GET
            </summary>
            <param name="id">ID do evento</param>
        </member>
        <member name="M:IRAPI.Controllers.EventoController.GetSetores(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Método da API que retorna o status da operação, uma mensagem e uma lista de setores com base no ID do evento e da apresentação.
            URL de acesso: eventos/{eventoID}/apresentacoes/{apresentacaoID}/setores
            Método de acesso: GET
            </summary>
            <param name="eventoID">ID do evento</param>
            <param name="apresentacaoID">ID da apresentação</param>
            <param name="comCotaNominal"></param>
            <param name="comCotaPromocional"></param>
        </member>
        <member name="M:IRAPI.Controllers.EventoController.GetMapaAssentos(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="eventoID"></param>
            <param name="apresentacaoID"></param>
            <param name="setorID"></param>
            <returns></returns>
            <exception cref="T:System.Web.Http.HttpResponseException"></exception>
        </member>
        <member name="M:IRAPI.Controllers.EventoController.GetMapaAssentosMesa(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="eventoID"></param>
            <param name="apresentacaoID"></param>
            <param name="setorID"></param>
            <returns></returns>
            <exception cref="T:System.Web.Http.HttpResponseException"></exception>
        </member>
        <member name="M:IRAPI.Controllers.EventoController.GetMapaEsquematico(System.Int32,System.Int32)">
            <summary>
            Método da API que retorna o status da operação, uma mensagem e um mapa esquemático com base no ID do evento e da apresentação.
            URL de acesso: eventos/{eventoID}/apresentacoes/{apresentacaoID}/mapa_esquematico
            Método de acesso: GET
            </summary>
            <param name="eventoID">ID do evento</param>
            <param name="apresentacaoID">ID da apresentação</param>
        </member>
        <member name="M:IRAPI.Controllers.EventoController.GetFormasPagamento(System.Int32)">
            <summary>
            Retorna as formas de pagamento do evento.
            </summary>
            <param name="eventoID"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.EventoController.GetInfoLeiMeia(System.Int32,System.Int32)">
            <summary>
            Retorna as informações do evento sobre a leia de meia entrada.
            </summary>
            <param name="canalId"></param>
            <param name="eventoId"></param>
            <returns></returns>
        </member>
        <member name="M:IRAPI.Controllers.EventoController.GetGoogleMarkup(System.Int32)">
            <summary>
            Método da API que retorna o google markup
            URL de acesso: eventos/google_markup/{ID}
            Método de acesso: GET
            </summary>
            <param name="id">Id do evento</param>
        </member>
        <member name="T:IRAPI.Controllers.LocalController">
            <summary>
            APIs de locais
            </summary>
        </member>
        <member name="M:IRAPI.Controllers.LocalController.Get(System.Int32)">
            <summary>
            Consulta local do evento por ID.
            </summary>
            <param name="id">Id do local</param>
            <returns>Detalhes do local</returns>
        </member>
        <member name="M:IRAPI.Controllers.LocalController.Get(System.String,System.String,System.String)">
            <summary>
            Retorna uma lista com locais de eventos filtrados por uma string de busca, estado e cidade.
            </summary>
            <param name="busca">Palavra-chave</param>
            <param name="uf">Estado</param>
            <param name="cidade">Cidade</param>
            <returns>Lista de locais</returns>
        </member>
        <member name="M:IRAPI.Controllers.TipoController.Get(System.Boolean)">
            <summary>
            Método da API que retorna o status da operação, uma mensagem e uma lista de tipos.
            URL de acesso: tipos?apenasEventos={false|true}
            Método de acesso: GET
            </summary>
            <param name="apenasEventos">Quando true retorno apenas com eventos ativos</param>
        </member>
        <member name="M:IRAPI.Controllers.TipoController.Get(System.Int32,System.Boolean)">
            <summary>
            Método da API que retorna o status da operação, uma mensagem e uma lista de subtipos com base no ID do tipo informado.
            URL de acesso: /Tipo/{tipoId}/subtipos?apenasEventos={false|true}
            Método de acesso: GET
            </summary>
            <param name="tipoId">ID do tipo</param>
            <param name="apenasEventos">Quando true retorno apenas com eventos ativos</param>
        </member>
        <member name="P:IRAPI.Models.LugarRequestModel.id">
            <summary>
            Id do ingresso
            </summary>
        </member>
        <member name="P:IRAPI.Models.LugarRequestModel.cd">
            <summary>
            Código do ingresso
            </summary>
        </member>
        <member name="P:IRAPI.Models.LugarRequestModel.st">
            <summary>
            Status do Ingresso (D - Disponivel ; ND - Não Disponivel ; SA - Seu Assento) 
            </summary>
        </member>
        <member name="P:IRAPI.Models.LugarRequestModel.tp">
            <summary>
            Tipo de lugar
            </summary>
        </member>
        <member name="P:IRAPI.Models.LugarRequestModel.tt">
            <summary>
            Total de Assentos
            </summary>
        </member>
        <member name="P:IRAPI.Models.LugarRequestModel.rv">
            <summary>
            Reserva de assentos
            </summary>
        </member>
        <member name="P:IRAPI.Models.LugarRequestModel.px">
            <summary>
            Ponto x do local do assento
            </summary>
        </member>
        <member name="P:IRAPI.Models.LugarRequestModel.py">
            <summary>
            Ponto Y do local
            </summary>
        </member>
        <member name="P:IRAPI.Models.GetMapaAssentosRequestModel.mp">
            <summary>
            Url do Mapa de assentos
            </summary>
        </member>
        <member name="T:IRAPI.Models.ReservaPacoteQtdModel">
            <summary>
            Model com informações de quandtidade e ID do pacote.
            </summary>
        </member>
        <member name="P:IRAPI.Models.ReservaPacoteQtdModel.qtd">
            <summary>
            Quantidade de pacotes.
            </summary>
        </member>
        <member name="P:IRAPI.Models.ReservaPacoteQtdModel.pacoteID">
            <summary>
            ID do pacote
            </summary>
        </member>
        <member name="T:IRAPI.Models.ReservaPacoteRequestModel">
            <summary>
            Model para request de reserva de pacotes.
            </summary>
        </member>
        <member name="M:IRAPI.Models.ReservaPacoteRequestModel.#ctor">
            <summary>
            Construtor que inicializa a propriedade limparReservaAnterior como false.
            </summary>
        </member>
        <member name="P:IRAPI.Models.ReservaPacoteRequestModel.pacotes">
            <summary>
            Lista com quantidade e ID dos pacotes a reservar.
            </summary>
        </member>
        <member name="P:IRAPI.Models.ReservaPacoteRequestModel.limparReservaAnterior">
            <summary>
            Propriedade para definir se a API limpa ou não a reserva anterior feita pelo usuário.
            </summary>
        </member>
        <member name="M:IRAPI.Models.EnderecoTemp.TamanhoValidado">
            <summary>
            Validar se tamanho da string é menor ou igual ao da tabela na base de dados
            </summary>
            <returns></returns>
        </member>
        <member name="T:IRAPI.Models.ClienteAuthFacebookCadasrtoRequestModel">
            <summary>
            Objeto de request do método de cadastro com facebook
            </summary>
        </member>
        <member name="M:IRAPI.Models.ClienteAuthFacebookCadasrtoRequestModel.op_Explicit(IRAPI.Models.ClienteAuthFacebookCadasrtoRequestModel)~IRCore.DataAccess.Model.Login">
            <summary>
            Converte um objeto do tipo ClienteAuthFacebookCadasrtoRequestModel em Login
            </summary>
            <param name="request">Objeto do tipo ClienteAuthFacebookCadasrtoRequestModel</param>
            <returns>Login</returns>
        </member>
        <member name="P:IRAPI.Models.ClienteAuthFacebookCadasrtoRequestModel.facebookAccessToken">
            <summary>
            Facebook access token
            </summary>
        </member>
        <member name="P:IRAPI.Models.ClienteAuthFacebookCadasrtoRequestModel.facebookAccessCode">
            <summary>
            Facebook access code
            </summary>
        </member>
        <member name="P:IRAPI.Models.ClienteAuthFacebookCadasrtoRequestModel.urlRet">
            <summary>
            Url de retorno
            </summary>
        </member>
        <member name="P:IRAPI.Models.ClienteAuthFacebookCadasrtoRequestModel.nome">
            <summary>
            Nome do cliente
            </summary>
        </member>
        <member name="P:IRAPI.Models.ClienteAuthFacebookCadasrtoRequestModel.email">
            <summary>
            Email do cliente
            </summary>
        </member>
        <member name="P:IRAPI.Models.ClienteAuthFacebookCadasrtoRequestModel.cpf">
            <summary>
            Cpf do cliente
            </summary>
        </member>
        <member name="P:IRAPI.Models.ClienteAuthFacebookCadasrtoRequestModel.dddTelefone">
            <summary>
            Ddd do telefone do cliente
            </summary>
        </member>
        <member name="P:IRAPI.Models.ClienteAuthFacebookCadasrtoRequestModel.telefone">
            <summary>
            Telefone do cliente
            </summary>
        </member>
        <member name="M:IRAPI.Providers.SimpleRefreshTokenProvider.Receive(Microsoft.Owin.Security.Infrastructure.AuthenticationTokenReceiveContext)">
            <summary>
            Realiza o processo de refresh do token.
            </summary>
            <param name="context">Contexto da aplicação.</param>
        </member>
        <member name="M:IRAPI.Providers.SimpleRefreshTokenProvider.ReceiveAsync(Microsoft.Owin.Security.Infrastructure.AuthenticationTokenReceiveContext)">
            <summary>
            Realiza o processo de refresh do token.
            </summary>
            <param name="context">Contexto da aplicação.</param>
            <returns>Retorna uma operação assincrona.</returns>
        </member>
    </members>
</doc>

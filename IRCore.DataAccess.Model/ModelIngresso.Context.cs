//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IRCore.DataAccess.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.Common;
    

    
    public partial class IRCoreEntitiesIngresso : DbContext
    {
        public IRCoreEntitiesIngresso()
            : base("name=IRCoreEntitiesIngresso")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EstornoDadosCartaoCredito> EstornoDadosCartaoCredito { get; set; }
        public virtual DbSet<EstornoDadosDepositoBancario> EstornoDadosDepositoBancario { get; set; }
        public virtual DbSet<EstornoDadosDinheiro> EstornoDadosDinheiro { get; set; }
        public virtual DbSet<EstornoHistoricoPlanilhas> EstornoHistoricoPlanilhas { get; set; }
        public virtual DbSet<ParceiroMidia> ParceiroMidia { get; set; }
        public virtual DbSet<tIngresso> tIngresso { get; set; }
        public virtual DbSet<tMapaEsquematico> tMapaEsquematico { get; set; }
        public virtual DbSet<tMapaEsquematicoSetor> tMapaEsquematicoSetor { get; set; }
        public virtual DbSet<tCaixa> tCaixa { get; set; }
        public virtual DbSet<tClienteEndereco> tClienteEndereco { get; set; }
        public virtual DbSet<tUsuario> tUsuario { get; set; }
        public virtual DbSet<tVendaBilheteria> tVendaBilheteria { get; set; }
        public virtual DbSet<tVendaBilheteriaItem> tVendaBilheteriaItem { get; set; }
        public virtual DbSet<tIngressoCliente> tIngressoCliente { get; set; }
        public virtual DbSet<Pais> Pais { get; set; }
        public virtual DbSet<tSetor> tSetor { get; set; }
        public virtual DbSet<tApresentacaoSetor> tApresentacaoSetor { get; set; }
        public virtual DbSet<tApresentacao> tApresentacao { get; set; }
        public virtual DbSet<tCliente> tCliente { get; set; }
        public virtual DbSet<tEvento> tEvento { get; set; }
        public virtual DbSet<tCompraTemporaria> tCompraTemporaria { get; set; }
        public virtual DbSet<tPreco> tPreco { get; set; }
        public virtual DbSet<tContatoTipo> tContatoTipo { get; set; }
        public virtual DbSet<tEmpresa> tEmpresa { get; set; }
        public virtual DbSet<tEntrega> tEntrega { get; set; }
        public virtual DbSet<tEntregaArea> tEntregaArea { get; set; }
        public virtual DbSet<tEntregaAreaBlackList> tEntregaAreaBlackList { get; set; }
        public virtual DbSet<tEntregaAreaCep> tEntregaAreaCep { get; set; }
        public virtual DbSet<tEntregaControle> tEntregaControle { get; set; }
        public virtual DbSet<tCEP> tCEP { get; set; }
        public virtual DbSet<tEventoEntregaControle> tEventoEntregaControle { get; set; }
        public virtual DbSet<tCanal> tCanal { get; set; }
        public virtual DbSet<tLoja> tLoja { get; set; }
        public virtual DbSet<xCaixa> xCaixa { get; set; }
        public virtual DbSet<xUsuario> xUsuario { get; set; }
        public virtual DbSet<cCaixa> cCaixa { get; set; }
        public virtual DbSet<cUsuario> cUsuario { get; set; }
        public virtual DbSet<tLugar> tLugar { get; set; }
        public virtual DbSet<cEmpresa> cEmpresa { get; set; }
        public virtual DbSet<xEmpresa> xEmpresa { get; set; }
        public virtual DbSet<tRegiao> tRegiao { get; set; }
        public virtual DbSet<tRegional> tRegional { get; set; }
        public virtual DbSet<tRegionalArea> tRegionalArea { get; set; }
        public virtual DbSet<ParceiroMidiaClasse> ParceiroMidiaClasse { get; set; }
        public virtual DbSet<ParceiroMidiaPraca> ParceiroMidiaPraca { get; set; }
        public virtual DbSet<ParceiroMidiaClasseSetor> ParceiroMidiaClasseSetor { get; set; }
        public virtual DbSet<EventoMidia> EventoMidia { get; set; }
        public virtual DbSet<EventoTipoMidia> EventoTipoMidia { get; set; }
        public virtual DbSet<tLocal> tLocal { get; set; }
        public virtual DbSet<tCanalPreco> tCanalPreco { get; set; }
        public virtual DbSet<cCanalPreco> cCanalPreco { get; set; }
        public virtual DbSet<cEvento> cEvento { get; set; }
        public virtual DbSet<cPreco> cPreco { get; set; }
        public virtual DbSet<xCanalPreco> xCanalPreco { get; set; }
        public virtual DbSet<xEvento> xEvento { get; set; }
        public virtual DbSet<xPreco> xPreco { get; set; }
        public virtual DbSet<tValeIngresso> tValeIngresso { get; set; }
        public virtual DbSet<tValeIngressoTipo> tValeIngressoTipo { get; set; }
        public virtual DbSet<tEventoSubtipo> tEventoSubtipo { get; set; }
        public virtual DbSet<tEventoTipo> tEventoTipo { get; set; }
        public virtual DbSet<ParceiroMidiaArea> ParceiroMidiaArea { get; set; }
        public virtual DbSet<tFormaPagamentoEvento> tFormaPagamentoEvento { get; set; }
        public virtual DbSet<tPacote> tPacote { get; set; }
        public virtual DbSet<tPacoteItem> tPacoteItem { get; set; }
        public virtual DbSet<tParceiro> tParceiro { get; set; }
        public virtual DbSet<tParcelamento> tParcelamento { get; set; }
        public virtual DbSet<tPacoteTemporario> tPacoteTemporario { get; set; }
        public virtual DbSet<tFeriado> tFeriado { get; set; }
        public virtual DbSet<tBandeira> tBandeira { get; set; }
        public virtual DbSet<tBloqueio> tBloqueio { get; set; }
        public virtual DbSet<cClienteEndereco> cClienteEndereco { get; set; }
        public virtual DbSet<xClienteEndereco> xClienteEndereco { get; set; }
        public virtual DbSet<cCliente> cCliente { get; set; }
        public virtual DbSet<xCliente> xCliente { get; set; }
        public virtual DbSet<tCota> tCota { get; set; }
        public virtual DbSet<tCotaItem> tCotaItem { get; set; }
        public virtual DbSet<tDonoIngresso> tDonoIngresso { get; set; }
        public virtual DbSet<tObrigatoriedade> tObrigatoriedade { get; set; }
        public virtual DbSet<tVendaBilheteriaFormaPagamento> tVendaBilheteriaFormaPagamento { get; set; }
        public virtual DbSet<tFormaPagamento> tFormaPagamento { get; set; }
        public virtual DbSet<tCartao> tCartao { get; set; }
        public virtual DbSet<ParceiroMidiaControleIngresso> ParceiroMidiaControleIngresso { get; set; }
        public virtual DbSet<ParceiroMidiaEvento> ParceiroMidiaEvento { get; set; }
        public virtual DbSet<Voucher> Voucher { get; set; }
        public virtual DbSet<AgregadoModel> tVendaBilheteriaAgregados { get; set; }
        public virtual DbSet<tVendaBilheteriaEntrega> tVendaBilheteriaEntrega { get; set; }
        public virtual DbSet<ListaBancos> ListaBancos { get; set; }
    
        public virtual ObjectResult<salvar_tCliente2ComContatoTipoID_Result> salvar_tCliente2ComContatoTipoID(int? usuarioID, int? clienteID, string timeStamp, string nome, string rG, string cPF, string carteiraEstudante, string sexo, string dDDTelefone, string telefone, string dDDTelefoneComercial, string telefoneComercial, string dDDCelular, string celular, string dataNascimento, string email, string recebeEmail, string cEPEntrega, string enderecoEntrega, string numeroEntrega, string cidadeEntrega, string estadoEntrega, string cEPCliente, string enderecoCliente, string numeroCliente, string cidadeCliente, string estadoCliente, int? clienteIndicacaoID, string obs, string complementoEntrega, string bairroEntrega, string complementoCliente, string bairroCliente, string senha, string ativo, string statusAtual, int? atualizacaoDuplicidade, string nomeEntrega, string cPFEntrega, string rGEntrega, string pais, string cPFResponsavel, int? contatoTipoID, string cNPJ, string nomeFantasia, string razaoSocial, string inscricaoEstadual, string profissao, int? situacaoProfissionalID, string dDDTelefoneComercial2, string telefoneComercial2, string loginOSESP, int siteId)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var timeStampParameter = timeStamp != null ?
                new ObjectParameter("TimeStamp", timeStamp) :
                new ObjectParameter("TimeStamp", typeof(string));
    
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var rGParameter = rG != null ?
                new ObjectParameter("RG", rG) :
                new ObjectParameter("RG", typeof(string));
    
            var cPFParameter = cPF != null ?
                new ObjectParameter("CPF", cPF) :
                new ObjectParameter("CPF", typeof(string));
    
            var carteiraEstudanteParameter = carteiraEstudante != null ?
                new ObjectParameter("CarteiraEstudante", carteiraEstudante) :
                new ObjectParameter("CarteiraEstudante", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var dDDTelefoneParameter = dDDTelefone != null ?
                new ObjectParameter("DDDTelefone", dDDTelefone) :
                new ObjectParameter("DDDTelefone", typeof(string));
    
            var telefoneParameter = telefone != null ?
                new ObjectParameter("Telefone", telefone) :
                new ObjectParameter("Telefone", typeof(string));
    
            var dDDTelefoneComercialParameter = dDDTelefoneComercial != null ?
                new ObjectParameter("DDDTelefoneComercial", dDDTelefoneComercial) :
                new ObjectParameter("DDDTelefoneComercial", typeof(string));
    
            var telefoneComercialParameter = telefoneComercial != null ?
                new ObjectParameter("TelefoneComercial", telefoneComercial) :
                new ObjectParameter("TelefoneComercial", typeof(string));
    
            var dDDCelularParameter = dDDCelular != null ?
                new ObjectParameter("DDDCelular", dDDCelular) :
                new ObjectParameter("DDDCelular", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("Celular", celular) :
                new ObjectParameter("Celular", typeof(string));
    
            var dataNascimentoParameter = dataNascimento != null ?
                new ObjectParameter("DataNascimento", dataNascimento) :
                new ObjectParameter("DataNascimento", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var recebeEmailParameter = recebeEmail != null ?
                new ObjectParameter("RecebeEmail", recebeEmail) :
                new ObjectParameter("RecebeEmail", typeof(string));
    
            var cEPEntregaParameter = cEPEntrega != null ?
                new ObjectParameter("CEPEntrega", cEPEntrega) :
                new ObjectParameter("CEPEntrega", typeof(string));
    
            var enderecoEntregaParameter = enderecoEntrega != null ?
                new ObjectParameter("EnderecoEntrega", enderecoEntrega) :
                new ObjectParameter("EnderecoEntrega", typeof(string));
    
            var numeroEntregaParameter = numeroEntrega != null ?
                new ObjectParameter("NumeroEntrega", numeroEntrega) :
                new ObjectParameter("NumeroEntrega", typeof(string));
    
            var cidadeEntregaParameter = cidadeEntrega != null ?
                new ObjectParameter("CidadeEntrega", cidadeEntrega) :
                new ObjectParameter("CidadeEntrega", typeof(string));
    
            var estadoEntregaParameter = estadoEntrega != null ?
                new ObjectParameter("EstadoEntrega", estadoEntrega) :
                new ObjectParameter("EstadoEntrega", typeof(string));
    
            var cEPClienteParameter = cEPCliente != null ?
                new ObjectParameter("CEPCliente", cEPCliente) :
                new ObjectParameter("CEPCliente", typeof(string));
    
            var enderecoClienteParameter = enderecoCliente != null ?
                new ObjectParameter("EnderecoCliente", enderecoCliente) :
                new ObjectParameter("EnderecoCliente", typeof(string));
    
            var numeroClienteParameter = numeroCliente != null ?
                new ObjectParameter("NumeroCliente", numeroCliente) :
                new ObjectParameter("NumeroCliente", typeof(string));
    
            var cidadeClienteParameter = cidadeCliente != null ?
                new ObjectParameter("CidadeCliente", cidadeCliente) :
                new ObjectParameter("CidadeCliente", typeof(string));
    
            var estadoClienteParameter = estadoCliente != null ?
                new ObjectParameter("EstadoCliente", estadoCliente) :
                new ObjectParameter("EstadoCliente", typeof(string));
    
            var clienteIndicacaoIDParameter = clienteIndicacaoID.HasValue ?
                new ObjectParameter("ClienteIndicacaoID", clienteIndicacaoID) :
                new ObjectParameter("ClienteIndicacaoID", typeof(int));
    
            var obsParameter = obs != null ?
                new ObjectParameter("Obs", obs) :
                new ObjectParameter("Obs", typeof(string));
    
            var complementoEntregaParameter = complementoEntrega != null ?
                new ObjectParameter("ComplementoEntrega", complementoEntrega) :
                new ObjectParameter("ComplementoEntrega", typeof(string));
    
            var bairroEntregaParameter = bairroEntrega != null ?
                new ObjectParameter("BairroEntrega", bairroEntrega) :
                new ObjectParameter("BairroEntrega", typeof(string));
    
            var complementoClienteParameter = complementoCliente != null ?
                new ObjectParameter("ComplementoCliente", complementoCliente) :
                new ObjectParameter("ComplementoCliente", typeof(string));
    
            var bairroClienteParameter = bairroCliente != null ?
                new ObjectParameter("BairroCliente", bairroCliente) :
                new ObjectParameter("BairroCliente", typeof(string));
    
            var senhaParameter = senha != null ?
                new ObjectParameter("Senha", senha) :
                new ObjectParameter("Senha", typeof(string));
    
            var ativoParameter = ativo != null ?
                new ObjectParameter("Ativo", ativo) :
                new ObjectParameter("Ativo", typeof(string));
    
            var statusAtualParameter = statusAtual != null ?
                new ObjectParameter("StatusAtual", statusAtual) :
                new ObjectParameter("StatusAtual", typeof(string));
    
            var atualizacaoDuplicidadeParameter = atualizacaoDuplicidade.HasValue ?
                new ObjectParameter("AtualizacaoDuplicidade", atualizacaoDuplicidade) :
                new ObjectParameter("AtualizacaoDuplicidade", typeof(int));
    
            var nomeEntregaParameter = nomeEntrega != null ?
                new ObjectParameter("NomeEntrega", nomeEntrega) :
                new ObjectParameter("NomeEntrega", typeof(string));
    
            var cPFEntregaParameter = cPFEntrega != null ?
                new ObjectParameter("CPFEntrega", cPFEntrega) :
                new ObjectParameter("CPFEntrega", typeof(string));
    
            var rGEntregaParameter = rGEntrega != null ?
                new ObjectParameter("RGEntrega", rGEntrega) :
                new ObjectParameter("RGEntrega", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var cPFResponsavelParameter = cPFResponsavel != null ?
                new ObjectParameter("CPFResponsavel", cPFResponsavel) :
                new ObjectParameter("CPFResponsavel", typeof(string));
    
            var contatoTipoIDParameter = contatoTipoID.HasValue ?
                new ObjectParameter("ContatoTipoID", contatoTipoID) :
                new ObjectParameter("ContatoTipoID", typeof(int));
    
            var cNPJParameter = cNPJ != null ?
                new ObjectParameter("CNPJ", cNPJ) :
                new ObjectParameter("CNPJ", typeof(string));
    
            var nomeFantasiaParameter = nomeFantasia != null ?
                new ObjectParameter("NomeFantasia", nomeFantasia) :
                new ObjectParameter("NomeFantasia", typeof(string));
    
            var razaoSocialParameter = razaoSocial != null ?
                new ObjectParameter("RazaoSocial", razaoSocial) :
                new ObjectParameter("RazaoSocial", typeof(string));
    
            var inscricaoEstadualParameter = inscricaoEstadual != null ?
                new ObjectParameter("InscricaoEstadual", inscricaoEstadual) :
                new ObjectParameter("InscricaoEstadual", typeof(string));
    
            var profissaoParameter = profissao != null ?
                new ObjectParameter("Profissao", profissao) :
                new ObjectParameter("Profissao", typeof(string));
    
            var situacaoProfissionalIDParameter = situacaoProfissionalID.HasValue ?
                new ObjectParameter("SituacaoProfissionalID", situacaoProfissionalID) :
                new ObjectParameter("SituacaoProfissionalID", typeof(int));
    
            var dDDTelefoneComercial2Parameter = dDDTelefoneComercial2 != null ?
                new ObjectParameter("DDDTelefoneComercial2", dDDTelefoneComercial2) :
                new ObjectParameter("DDDTelefoneComercial2", typeof(string));
    
            var telefoneComercial2Parameter = telefoneComercial2 != null ?
                new ObjectParameter("TelefoneComercial2", telefoneComercial2) :
                new ObjectParameter("TelefoneComercial2", typeof(string));
    
            var loginOSESPParameter = loginOSESP != null ?
                new ObjectParameter("LoginOSESP", loginOSESP) :
                new ObjectParameter("LoginOSESP", typeof(string));
    
            var siteIdParameter = new ObjectParameter("SiteID", siteId);

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<salvar_tCliente2ComContatoTipoID_Result>("salvar_tCliente2ComContatoTipoID", usuarioIDParameter, clienteIDParameter, timeStampParameter, nomeParameter, rGParameter, cPFParameter, carteiraEstudanteParameter, sexoParameter, dDDTelefoneParameter, telefoneParameter, dDDTelefoneComercialParameter, telefoneComercialParameter, dDDCelularParameter, celularParameter, dataNascimentoParameter, emailParameter, recebeEmailParameter, cEPEntregaParameter, enderecoEntregaParameter, numeroEntregaParameter, cidadeEntregaParameter, estadoEntregaParameter, cEPClienteParameter, enderecoClienteParameter, numeroClienteParameter, cidadeClienteParameter, estadoClienteParameter, clienteIndicacaoIDParameter, obsParameter, complementoEntregaParameter, bairroEntregaParameter, complementoClienteParameter, bairroClienteParameter, senhaParameter, ativoParameter, statusAtualParameter, atualizacaoDuplicidadeParameter, nomeEntregaParameter, cPFEntregaParameter, rGEntregaParameter, paisParameter, cPFResponsavelParameter, contatoTipoIDParameter, cNPJParameter, nomeFantasiaParameter, razaoSocialParameter, inscricaoEstadualParameter, profissaoParameter, situacaoProfissionalIDParameter, dDDTelefoneComercial2Parameter, telefoneComercial2Parameter, loginOSESPParameter, siteIdParameter);
        }
    
        public virtual ObjectResult<sp_getApresentacaoInfo_Result> sp_getApresentacaoInfo(Nullable<int> apresentacaoID, Nullable<int> setorID)
        {
            var apresentacaoIDParameter = apresentacaoID.HasValue ?
                new ObjectParameter("ApresentacaoID", apresentacaoID) :
                new ObjectParameter("ApresentacaoID", typeof(int));
    
            var setorIDParameter = setorID.HasValue ?
                new ObjectParameter("SetorID", setorID) :
                new ObjectParameter("SetorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getApresentacaoInfo_Result>("sp_getApresentacaoInfo", apresentacaoIDParameter, setorIDParameter);
        }
    
        public virtual ObjectResult<ReportClientesTrocaVoucher_Result> ReportClientesTrocaVoucher(Nullable<int> parceiroMidiaID, Nullable<int> tipoID, Nullable<int> areaID, Nullable<System.DateTime> periodoDe, Nullable<System.DateTime> peridodoAte, Nullable<int> localID, Nullable<int> eventoID, string classesIDs, string pracasIDs)
        {
            var parceiroMidiaIDParameter = parceiroMidiaID.HasValue ?
                new ObjectParameter("parceiroMidiaID", parceiroMidiaID) :
                new ObjectParameter("parceiroMidiaID", typeof(int));
    
            var tipoIDParameter = tipoID.HasValue ?
                new ObjectParameter("tipoID", tipoID) :
                new ObjectParameter("tipoID", typeof(int));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(int));
    
            var periodoDeParameter = periodoDe.HasValue ?
                new ObjectParameter("periodoDe", periodoDe) :
                new ObjectParameter("periodoDe", typeof(System.DateTime));
    
            var peridodoAteParameter = peridodoAte.HasValue ?
                new ObjectParameter("peridodoAte", peridodoAte) :
                new ObjectParameter("peridodoAte", typeof(System.DateTime));
    
            var localIDParameter = localID.HasValue ?
                new ObjectParameter("localID", localID) :
                new ObjectParameter("localID", typeof(int));
    
            var eventoIDParameter = eventoID.HasValue ?
                new ObjectParameter("eventoID", eventoID) :
                new ObjectParameter("eventoID", typeof(int));
    
            var classesIDsParameter = classesIDs != null ?
                new ObjectParameter("classesIDs", classesIDs) :
                new ObjectParameter("classesIDs", typeof(string));
    
            var pracasIDsParameter = pracasIDs != null ?
                new ObjectParameter("pracasIDs", pracasIDs) :
                new ObjectParameter("pracasIDs", typeof(string));
    
            var retorno = ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportClientesTrocaVoucher_Result>("ReportClientesTrocaVoucher");

            return retorno;
        }
    
        public virtual ObjectResult<ReportIngressosLiberados_Result> ReportIngressosLiberados(Nullable<int> parceiroMidiaID, Nullable<int> tipoID, Nullable<int> areaID, Nullable<System.DateTime> periodoDe, Nullable<System.DateTime> peridodoAte, Nullable<int> localID, Nullable<int> eventoID, string classesIDs, string pracasIDs)
        {
            var parceiroMidiaIDParameter = parceiroMidiaID.HasValue ?
                new ObjectParameter("parceiroMidiaID", parceiroMidiaID) :
                new ObjectParameter("parceiroMidiaID", typeof(int));
    
            var tipoIDParameter = tipoID.HasValue ?
                new ObjectParameter("tipoID", tipoID) :
                new ObjectParameter("tipoID", typeof(int));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(int));
    
            var periodoDeParameter = periodoDe.HasValue ?
                new ObjectParameter("periodoDe", periodoDe) :
                new ObjectParameter("periodoDe", typeof(System.DateTime));
    
            var peridodoAteParameter = peridodoAte.HasValue ?
                new ObjectParameter("peridodoAte", peridodoAte) :
                new ObjectParameter("peridodoAte", typeof(System.DateTime));
    
            var localIDParameter = localID.HasValue ?
                new ObjectParameter("localID", localID) :
                new ObjectParameter("localID", typeof(int));
    
            var eventoIDParameter = eventoID.HasValue ?
                new ObjectParameter("eventoID", eventoID) :
                new ObjectParameter("eventoID", typeof(int));
    
            var classesIDsParameter = classesIDs != null ?
                new ObjectParameter("classesIDs", classesIDs) :
                new ObjectParameter("classesIDs", typeof(string));
    
            var pracasIDsParameter = pracasIDs != null ?
                new ObjectParameter("pracasIDs", pracasIDs) :
                new ObjectParameter("pracasIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportIngressosLiberados_Result>("ReportIngressosLiberados", parceiroMidiaIDParameter, tipoIDParameter, areaIDParameter, periodoDeParameter, peridodoAteParameter, localIDParameter, eventoIDParameter, classesIDsParameter, pracasIDsParameter);
        }

        public virtual ObjectResult<ReportIngressosDisponiveis_Result> ReportIngressosDisponiveis(Nullable<int> parceiroMidiaID, Nullable<System.DateTime> periodoDe, Nullable<System.DateTime> peridodoAte, Nullable<int> localID, Nullable<int> eventoID, string classesIDs)
        {
            var parceiroMidiaIDParameter = parceiroMidiaID.HasValue ?
                new ObjectParameter("parceiroMidiaID", parceiroMidiaID) :
                new ObjectParameter("parceiroMidiaID", typeof(int));
            
            var periodoDeParameter = periodoDe.HasValue ?
                new ObjectParameter("periodoDe", periodoDe) :
                new ObjectParameter("periodoDe", typeof(System.DateTime));

            var peridodoAteParameter = peridodoAte.HasValue ?
                new ObjectParameter("peridodoAte", peridodoAte) :
                new ObjectParameter("peridodoAte", typeof(System.DateTime));

            var localIDParameter = localID.HasValue ?
                new ObjectParameter("localID", localID) :
                new ObjectParameter("localID", typeof(int));

            var eventoIDParameter = eventoID.HasValue ?
                new ObjectParameter("eventoID", eventoID) :
                new ObjectParameter("eventoID", typeof(int));

            var classesIDsParameter = classesIDs != null ?
                new ObjectParameter("classesIDs", classesIDs) :
                new ObjectParameter("classesIDs", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportIngressosDisponiveis_Result>("ReportIngressosDisponiveis", parceiroMidiaIDParameter,periodoDeParameter, peridodoAteParameter, localIDParameter, eventoIDParameter, classesIDsParameter);
        }

        public virtual ObjectResult<ReportHistoricoIngressos_Result> ReportHistoricoIngressos(Nullable<int> parceiroMidiaID, Nullable<int> tipoID, Nullable<int> areaID, Nullable<System.DateTime> periodoDe, Nullable<System.DateTime> peridodoAte, Nullable<int> localID, Nullable<int> eventoID, string classesIDs, string pracasIDs)
        {
            var parceiroMidiaIDParameter = parceiroMidiaID.HasValue ?
                new ObjectParameter("parceiroMidiaID", parceiroMidiaID) :
                new ObjectParameter("parceiroMidiaID", typeof(int));

            var tipoIDParameter = tipoID.HasValue ?
                new ObjectParameter("tipoID", tipoID) :
                new ObjectParameter("tipoID", typeof(int));

            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(int));

            var periodoDeParameter = periodoDe.HasValue ?
                new ObjectParameter("periodoDe", periodoDe) :
                new ObjectParameter("periodoDe", typeof(System.DateTime));

            var peridodoAteParameter = peridodoAte.HasValue ?
                new ObjectParameter("peridodoAte", peridodoAte) :
                new ObjectParameter("peridodoAte", typeof(System.DateTime));

            var localIDParameter = localID.HasValue ?
                new ObjectParameter("localID", localID) :
                new ObjectParameter("localID", typeof(int));

            var eventoIDParameter = eventoID.HasValue ?
                new ObjectParameter("eventoID", eventoID) :
                new ObjectParameter("eventoID", typeof(int));

            var classesIDsParameter = classesIDs != null ?
                new ObjectParameter("classesIDs", classesIDs) :
                new ObjectParameter("classesIDs", typeof(string));

            var pracasIDsParameter = pracasIDs != null ?
                new ObjectParameter("pracasIDs", pracasIDs) :
                new ObjectParameter("pracasIDs", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportHistoricoIngressos_Result>("ReportHistoricoIngressos", parceiroMidiaIDParameter, tipoIDParameter, areaIDParameter, periodoDeParameter, peridodoAteParameter, localIDParameter, eventoIDParameter, classesIDsParameter, pracasIDsParameter);
        }

    
        public virtual ObjectResult<ReportVoucherTrocas_Result> ReportVoucherTrocas(Nullable<int> parceiroMidiaID, Nullable<int> areaID, string classesIDs, string pracasIDs, Nullable<System.DateTime> periodoDe, Nullable<System.DateTime> peridodoAte)
        {
            //PROC ReportVoucherTrocas
            var parceiroMidiaIDParameter = parceiroMidiaID.HasValue ?
                new ObjectParameter("parceiroMidiaID", parceiroMidiaID) :
                new ObjectParameter("parceiroMidiaID", typeof(int));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(int));
    
            var classesIDsParameter = classesIDs != null ?
                new ObjectParameter("classesIDs", classesIDs) :
                new ObjectParameter("classesIDs", typeof(string));
    
            var pracasIDsParameter = pracasIDs != null ?
                new ObjectParameter("pracasIDs", pracasIDs) :
                new ObjectParameter("pracasIDs", typeof(string));
    
            var periodoDeParameter = periodoDe.HasValue ?
                new ObjectParameter("periodoDe", periodoDe) :
                new ObjectParameter("periodoDe", typeof(System.DateTime));

            var peridodoAteParameter = peridodoAte.HasValue ?
                new ObjectParameter("peridodoAte", peridodoAte) :
                new ObjectParameter("peridodoAte", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportVoucherTrocas_Result>("ReportVoucherTrocas", parceiroMidiaIDParameter, areaIDParameter, classesIDsParameter, pracasIDsParameter, periodoDeParameter, peridodoAteParameter);
        }
    
        public virtual ObjectResult<ReportIngressosOffline_Result> ReportIngressosOffline(Nullable<int> eventoID, Nullable<int> apresentacaoID, string status)
        {
            var eventoIDParameter = eventoID.HasValue ?
                new ObjectParameter("eventoID", eventoID) :
                new ObjectParameter("eventoID", typeof(int));
    
            var apresentacaoIDParameter = apresentacaoID.HasValue ?
                new ObjectParameter("apresentacaoID", apresentacaoID) :
                new ObjectParameter("apresentacaoID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportIngressosOffline_Result>("ReportIngressosOffline", eventoIDParameter, apresentacaoIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<ListaEventosPorNome_Result> ListaEventosPorNome(string eventoNome)
        {
            var eventoNomeParameter = eventoNome != null ?
                new ObjectParameter("eventoNome", eventoNome) :
                new ObjectParameter("eventoNome", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListaEventosPorNome_Result>("ListaEventosPorNome", eventoNomeParameter);
        }
    
        public virtual ObjectResult<ReportListaNegra_Result> ReportListaNegra(Nullable<int> eventoID, Nullable<int> apresentacaoID)
        {
            var eventoIDParameter = eventoID.HasValue ?
                new ObjectParameter("eventoID", eventoID) :
                new ObjectParameter("eventoID", typeof(int));
    
            var apresentacaoIDParameter = apresentacaoID.HasValue ?
                new ObjectParameter("apresentacaoID", apresentacaoID) :
                new ObjectParameter("apresentacaoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportListaNegra_Result>("ReportListaNegra", eventoIDParameter, apresentacaoIDParameter);
        }
    
        public virtual ObjectResult<ReportRaioX_Result> ReportRaioX(Nullable<int> eventoID, Nullable<int> apresentacaoID)
        {
            var eventoIDParameter = eventoID.HasValue ?
                new ObjectParameter("eventoID", eventoID) :
                new ObjectParameter("eventoID", typeof(int));
    
            var apresentacaoIDParameter = apresentacaoID.HasValue ?
                new ObjectParameter("apresentacaoID", apresentacaoID) :
                new ObjectParameter("apresentacaoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportRaioX_Result>("ReportRaioX", eventoIDParameter, apresentacaoIDParameter);
        }
    
        public virtual ObjectResult<ReportWillCall_Result> ReportWillCall(string eventosID, string status, Nullable<System.DateTime> inicial, Nullable<System.DateTime> final, Nullable<int> localID)
        {
            var eventosIDParameter = eventosID != null ?
                new ObjectParameter("eventosID", eventosID) :
                new ObjectParameter("eventosID", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var inicialParameter = inicial.HasValue ?
                new ObjectParameter("inicial", inicial) :
                new ObjectParameter("inicial", typeof(System.DateTime));
    
            var finalParameter = final.HasValue ?
                new ObjectParameter("final", final) :
                new ObjectParameter("final", typeof(System.DateTime));
    
            var localIDParameter = localID.HasValue ?
                new ObjectParameter("localID", localID) :
                new ObjectParameter("localID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportWillCall_Result>("ReportWillCall", eventosIDParameter, statusParameter, inicialParameter, finalParameter, localIDParameter);
        }
    
        public virtual ObjectResult<ProcListaPrefisUsuario_Result> ProcListaPrefisUsuario(Nullable<int> usuarioID)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("usuarioID", usuarioID) :
                new ObjectParameter("usuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcListaPrefisUsuario_Result>("ProcListaPrefisUsuario", usuarioIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProcListaEventoIDPorRegional(Nullable<int> regionalID)
        {
            var regionalIDParameter = regionalID.HasValue ?
                new ObjectParameter("regionalID", regionalID) :
                new ObjectParameter("regionalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProcListaEventoIDPorRegional", regionalIDParameter);
        }
    }
}
